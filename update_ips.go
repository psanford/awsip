//go:build tools
// +build tools

package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"os"
	"sort"
	"text/template"

	"golang.org/x/tools/imports"
)

var ipURL = flag.String("url", "https://ip-ranges.amazonaws.com/ip-ranges.json", "URL to fetch ips from")

func main() {
	flag.Parse()
	resp, err := http.Get(*ipURL)
	if err != nil {
		log.Fatalf("http fetch err: %s", err)
	}

	dec := json.NewDecoder(resp.Body)
	var ips IpResp
	err = dec.Decode(&ips)
	if err != nil {
		log.Fatalf("decode json err: %s", err)
	}

	ipv4s := make(map[string]IPv4Prefix)
	ipv6s := make(map[string]IPv6Prefix)

	for _, ipv4 := range ips.Prefixes {
		if existing, found := ipv4s[ipv4.IPPrefix]; found {
			existing.Services = append(existing.Services, ipv4.Service)
			ipv4s[ipv4.IPPrefix] = existing
		} else {
			ipv4.Services = []string{ipv4.Service}
			ipv4s[ipv4.IPPrefix] = ipv4
		}
	}

	for _, ipv6 := range ips.Ipv6Prefixes {
		if existing, found := ipv6s[ipv6.Ipv6Prefix]; found {
			existing.Services = append(existing.Services, ipv6.Service)
			ipv6s[ipv6.Ipv6Prefix] = existing
		} else {
			ipv6.Services = []string{ipv6.Service}
			ipv6s[ipv6.Ipv6Prefix] = ipv6
		}
	}

	ips.Prefixes = ips.Prefixes[:0]
	ips.Ipv6Prefixes = ips.Ipv6Prefixes[:0]

	for _, ipv4 := range ipv4s {
		ips.Prefixes = append(ips.Prefixes, ipv4)
	}

	for _, ipv6 := range ipv6s {
		ips.Ipv6Prefixes = append(ips.Ipv6Prefixes, ipv6)
	}

	sort.Slice(ips.Prefixes, func(i, j int) bool {
		return ips.Prefixes[i].IPPrefix < ips.Prefixes[j].IPPrefix
	})

	sort.Slice(ips.Ipv6Prefixes, func(i, j int) bool {
		return ips.Ipv6Prefixes[i].Ipv6Prefix < ips.Ipv6Prefixes[j].Ipv6Prefix
	})

	tmpl := template.Must(template.New("ips").Parse(ipTmpl))

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, ips)
	if err != nil {
		log.Fatalf("template err: %s", err)
	}

	fmted, err := imports.Process("ips.gen.go", buf.Bytes(), nil)
	if err != nil {
		log.Fatalf("goimports error: %s", err)
	}

	fout, err := os.Create("ips.gen.go")
	if err != nil {
		log.Fatalf("open ips.gen.go err: %s", err)
	}

	fout.Write(fmted)
	fout.Close()
}

var ipTmpl = `
// Code generated by update_ips.go. DO NOT EDIT.

package awsip

import (
	"net/netip"
)

var ipRanges = []IPRange{
{{- range .Prefixes}}
	{
		Prefix: netip.MustParsePrefix("{{.IPPrefix}}"),
		NetworkBorderGroup: "{{.NetworkBorderGroup}}",
		Region: "{{.Region}}",
		Services: []string{ {{range .Services}}"{{.}}",{{end}} },
	},
{{- end}}
{{- range .Ipv6Prefixes}}
	{
		Prefix: netip.MustParsePrefix("{{.Ipv6Prefix}}"),
		NetworkBorderGroup: "{{.NetworkBorderGroup}}",
		Region: "{{.Region}}",
		Services: []string{ {{range .Services}}"{{.}}",{{end}} },
	},
{{- end}}
}

var createDate = "{{.CreateDate}}"
`

type IpResp struct {
	CreateDate   string       `json:"createDate"`
	Ipv6Prefixes []IPv6Prefix `json:"ipv6_prefixes"`
	Prefixes     []IPv4Prefix `json:"prefixes"`
	SyncToken    string       `json:"syncToken"`
}

type IPv6Prefix struct {
	Ipv6Prefix         string `json:"ipv6_prefix"`
	NetworkBorderGroup string `json:"network_border_group"`
	Region             string `json:"region"`
	Service            string `json:"service"`
	Services           []string
}

type IPv4Prefix struct {
	IPPrefix           string `json:"ip_prefix"`
	NetworkBorderGroup string `json:"network_border_group"`
	Region             string `json:"region"`
	Service            string `json:"service"`
	Services           []string
}
