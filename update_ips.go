// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"os"
	"text/template"

	"golang.org/x/tools/imports"
)

var ipURL = flag.String("url", "https://ip-ranges.amazonaws.com/ip-ranges.json", "URL to fetch ips from")

func main() {
	flag.Parse()
	resp, err := http.Get(*ipURL)
	if err != nil {
		log.Fatalf("http fetch err: %s", err)
	}

	dec := json.NewDecoder(resp.Body)
	var ips IpResp
	err = dec.Decode(&ips)
	if err != nil {
		log.Fatalf("decode json err: %s", err)
	}

	tmpl := template.Must(template.New("ips").Parse(ipTmpl))

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, ips)
	if err != nil {
		log.Fatalf("template err: %s", err)
	}

	fmted, err := imports.Process("ips.gen.go", buf.Bytes(), nil)
	if err != nil {
		log.Fatalf("goimports error: %s", err)
	}

	fout, err := os.Create("ips.gen.go")
	if err != nil {
		log.Fatalf("open ips.gen.go err: %s", err)
	}

	fout.Write(fmted)
	fout.Close()
}

var ipTmpl = `
// Code generated by update_ips.go. DO NOT EDIT.

package awsip

import (
	"net/netip"
)

var ipRanges = []IPRange{
{{- range .Prefixes}}
	{
		Prefix: netip.MustParsePrefix("{{.IPPrefix}}"),
		NetworkBorderGroup: "{{.NetworkBorderGroup}}",
		Region: "{{.Region}}",
		Service: "{{.Service}}",
	},
{{- end}}
{{- range .Ipv6Prefixes}}
	{
		Prefix: netip.MustParsePrefix("{{.Ipv6Prefix}}"),
		NetworkBorderGroup: "{{.NetworkBorderGroup}}",
		Region: "{{.Region}}",
		Service: "{{.Service}}",
	},
{{- end}}
}

var createDate = "{{.CreateDate}}"
`

type IpResp struct {
	CreateDate   string `json:"createDate"`
	Ipv6Prefixes []struct {
		Ipv6Prefix         string `json:"ipv6_prefix"`
		NetworkBorderGroup string `json:"network_border_group"`
		Region             string `json:"region"`
		Service            string `json:"service"`
	} `json:"ipv6_prefixes"`
	Prefixes []struct {
		IPPrefix           string `json:"ip_prefix"`
		NetworkBorderGroup string `json:"network_border_group"`
		Region             string `json:"region"`
		Service            string `json:"service"`
	} `json:"prefixes"`
	SyncToken string `json:"syncToken"`
}
